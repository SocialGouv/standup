---
include:
- '/k8s/.deploy-standup.yml'

#

variables:
  DOCKER_DRIVER: overlay2
  DOCKER_HOST: tcp://localhost:2375
  IMAGE_INFRA_BASE_NAME: "infra/images-docker"
  NODE_VERSION: "10.15-slim"
  NGINX_VERSION: "1.17"
  UBUNTU_VERSION: "18.10"
  FRONT_PORT: 80
  CLUSTER_NAME: "dev"
  APP_NAME: "standup"
  FEATURE_ENVIRONMENT_NAME: "feature"
  MASTER_ENVIRONMENT_NAME: "master"
  PREPROD_ENVIRONMENT_NAME: "prep"
  PROD_ENVIRONMENT_NAME: "prod"

#

.get_github_id_stage: &get_github_id_stage
  image:
    name: $CI_REGISTRY/$IMAGE_INFRA_BASE_NAME/docker-kube:latest
    entrypoint: [""]
  before_script:
    - envsubst < k8s/scripts/get-deploy-id.sh > k8s/scripts/get-github-deploy-id.sh
  script:
    - sh k8s/scripts/get-github-deploy-id.sh
  artifacts:
    paths:
    - github_deploy_id

.node_stage_template: &node_stage
  image: node:$NODE_VERSION
  before_script:
    - yarn --frozen-lockfile

.deploy_stage: &deploy_stage
  stage: "Deploy Standup"
  dependencies: []
  variables: &deploy_stage_variables
    APP_REGISTRY: $CI_REGISTRY_IMAGE

.send_url_to_github_stage: &send_url_to_github_stage
  stage: "Send Url to GitHub"
  image:
    name: $CI_REGISTRY/$IMAGE_INFRA_BASE_NAME/docker-kube:latest
    entrypoint: [""]
  script:
    - export DEPLOY_ID=$(cat github_deploy_id)
    - envsubst < k8s/scripts/send-url.sh > k8s/scripts/send-url-to-github.sh
    - sh k8s/scripts/send-url-to-github.sh $CI_COMMIT_REF_NAME

# 

stages:
  - "Prepare"
  - "Build"
  - "Code Quality"
  - "Register Docker Image"
  - "Test Docker Image"
  - "Deploy Standup"
  - "Send Url to GitHub"
  - "Make a new release"
  - "Deploy Standup to prod"


###########################################
###               PREPARE               ###
###########################################


Get Github Id (feature):
  <<: *get_github_id_stage
  stage: "Prepare"
  environment:
    name: $FEATURE_ENVIRONMENT_NAME-$CLUSTER_NAME
  except:
    - master
    - /^v.*/

Get Github Id (master):
  <<: *get_github_id_stage
  stage: "Prepare"
  environment:
    name: $MASTER_ENVIRONMENT_NAME-$CLUSTER_NAME
  only:
    - master

Get Github Id (preprod):
  <<: *get_github_id_stage
  stage: "Prepare"
  environment:
    name: $PREPROD_ENVIRONMENT_NAME-$CLUSTER_NAME
  only:
    - /^v.*/

Build Assets:
  <<: *node_stage
  stage: "Prepare"
  script:
    - yarn build
  cache:
    key: ${CI_COMMIT_REF_SLUG}
    paths:
      - node_modules/
  artifacts:
    expire_in: "1 day"
    paths:
      - build


###########################################
###             CODE QUALITY            ###
###########################################


Test:
  <<: *node_stage
  stage: "Code Quality"
  script:
    - yarn test

Lint:
  <<: *node_stage
  stage: "Code Quality"
  script:
    - yarn lint


###########################################
###       REGISTER DOCKER IMAGES        ###
###########################################


Register Docker Image Tagged with Commit SHA:
  stage: "Register Docker Image"
  image: docker:18
  services:
    - name: docker:18-dind
  before_script:
    - docker login $CI_REGISTRY -u gitlab-ci-token -p $CI_JOB_TOKEN
  script:
    - docker pull  $CI_REGISTRY_IMAGE:$CI_COMMIT_BEFORE_SHA || true
    - >-
      docker build
      --build-arg NGINX_VERSION=$NGINX_VERSION
      --build-arg EXPOSED_PORT=$FRONT_PORT
      --cache-from "$CI_REGISTRY_IMAGE:$CI_COMMIT_BEFORE_SHA"
      -t "$CI_REGISTRY_IMAGE:$CI_COMMIT_SHA" .
    - docker push "$CI_REGISTRY_IMAGE:$CI_COMMIT_SHA"
  except:
    - /^v.*/

Register Docker image tagged with release version:
  stage: "Register Docker Image"
  image: docker:18
  services:
    - name: docker:18-dind
  before_script:
    - docker login $CI_REGISTRY -u gitlab-ci-token -p $CI_JOB_TOKEN
  script:
    - >-
      docker build
      --build-arg NGINX_VERSION=$NGINX_VERSION
      --build-arg EXPOSED_PORT=$FRONT_PORT
      -t  "$CI_REGISTRY_IMAGE:$RELEASE_VERSION" .
    - docker push "$CI_REGISTRY_IMAGE:$RELEASE_VERSION"
  only:
    - /^v.*/


###########################################
###          TEST DOCKER IMAGE          ###
###########################################


Test Docker image:
  stage: "Test Docker Image"
  image: ubuntu:$UBUNTU_VERSION
  services:
    - name: $CI_REGISTRY_IMAGE:$CI_COMMIT_SHA
  script:
    - apt update && apt install -y curl
    - curl -v http://localhost:$FRONT_PORT
  except:
    - /^v.*/

Test Docker image tagged with release version:
  stage: "Test Docker Image"
  image: ubuntu:$UBUNTU_VERSION
  services:
    - name: $CI_REGISTRY_IMAGE:$RELEASE_VERSION
  script:
    - apt update && apt install -y curl
    - curl -v http://localhost:$FRONT_PORT
  only:
    - /^v.*/

###########################################
###            DEPLOY TO K8S            ###
###########################################


Deploy Standup (feature):
  <<: *deploy_stage
  extends: .deploy-standup-k8s-feature
  variables:
    <<: *deploy_stage_variables
    PORT: $FRONT_PORT
    NAMESPACE: $FEATURE_ENVIRONMENT_NAME
    LETSENCRYPT_ISSUER: letsencrypt-staging
    IMAGE_TAG: $CI_COMMIT_SHA
  environment:
    name: $FEATURE_ENVIRONMENT_NAME-$CLUSTER_NAME
  except:
    - master
    - /^v.*/

Deploy Standup (master):
  <<: *deploy_stage
  extends: .deploy-standup-k8s-master
  variables:
    <<: *deploy_stage_variables
    PORT: $FRONT_PORT
    NAMESPACE: $MASTER_ENVIRONMENT_NAME
    HASH_BRANCH_NAME: ''
    INGRESS_ENVIRONMENT_PREFIX: $MASTER_ENVIRONMENT_NAME.
    LETSENCRYPT_ISSUER: letsencrypt-prod
    IMAGE_TAG: $CI_COMMIT_SHA
  environment:
    name: $MASTER_ENVIRONMENT_NAME-$CLUSTER_NAME
  only:
    - master

Deploy Standup (preprod):
  <<: *deploy_stage
  extends: .deploy-standup-k8s-preprod
  variables:
    <<: *deploy_stage_variables
    PORT: $FRONT_PORT
    NAMESPACE: $PREPROD_ENVIRONMENT_NAME
    HASH_BRANCH_NAME: ''
    INGRESS_ENVIRONMENT_PREFIX: $PREPROD_ENVIRONMENT_NAME.
    LETSENCRYPT_ISSUER: letsencrypt-prod
    IMAGE_TAG: $RELEASE_VERSION
  environment:
    name: $PREPROD_ENVIRONMENT_NAME-$CLUSTER_NAME
  only:
    - /^v.*/

###########################################
###         SEND URL TO GITHUB          ###
###########################################


Send deployment url to Github (feature):
  <<: *send_url_to_github_stage
  before_script:
    - HASH_BRANCH_NAME=$(printf "$CI_COMMIT_REF_NAME" | sha1sum | cut -c1-5)
    - export INGRESS_ENVIRONMENT_PREFIX=$HASH_BRANCH_NAME.
    - export URL=https://${INGRESS_ENVIRONMENT_PREFIX}standup.${DOMAIN_NAME}/
  environment:
    name: $FEATURE_ENVIRONMENT_NAME-$CLUSTER_NAME
  except:
    - master
    - /^v.*/

Send deployment url to Github (master):
  <<: *send_url_to_github_stage
  variables:
    URL: https://$MASTER_ENVIRONMENT_NAME.standup.${DOMAIN_NAME}/
  environment:
    name: $MASTER_ENVIRONMENT_NAME-$CLUSTER_NAME
  only:
    - master

Send deployment url to Github (preprod):
  <<: *send_url_to_github_stage
  variables:
    URL: https://$PREPROD_ENVIRONMENT_NAME.standup.${DOMAIN_NAME}/
  environment:
    name: $PREPROD_ENVIRONMENT_NAME-$CLUSTER_NAME
  only:
    - /^v.*/


###########################################
###           RELEASE VERSION           ###
###########################################

Make a new release to deploy to preprod environment :
  stage: "Make a new release"
  before_script:
    - 'which ssh-agent || ( apt-get update -y && apt-get install openssh-client git -y )'
    - eval $(ssh-agent -s)
    - echo "$GIT_SSH_PRIV_KEY" | tr -d '\r' | ssh-add - > /dev/null
    - mkdir -p ~/.ssh
    - chmod 700 ~/.ssh
    - ssh-keyscan -t rsa github.com >> ~/.ssh/known_hosts
    - git config --global user.email "LD-DSI-MITECH@sg.social.gouv.fr"
    - git config --global user.name "Botops Incubateur"
  script:
    - git clone git@github.com:SocialGouv/standup.git
    - cd standup
    - git checkout boni-ci
    - git pull origin boni-ci
    - git tag $RELEASE_VERSION
    - git push origin boni-ci $RELEASE_VERSION
  when: manual
  only:
    - master


###########################################
###            DEPLOY TO PROD           ###
###########################################

Deploy Standup (prod) :
  stage: "Deploy Standup to prod"
  extends: .deploy-standup-k8s-prod
  variables:
    <<: *deploy_stage_variables
    PORT: $FRONT_PORT
    NAMESPACE: $PROD_ENVIRONMENT_NAME
    INGRESS_ENVIRONMENT_PREFIX: ''
    LETSENCRYPT_ISSUER: letsencrypt-prod
    IMAGE_TAG: $RELEASE_VERSION
  environment:
    name: $PROD_ENVIRONMENT_NAME
  when: manual
  only:
    - /^v.*/
