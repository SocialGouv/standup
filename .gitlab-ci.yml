---

#

variables:
  DOCKER_DRIVER: overlay2
  DOCKER_HOST: tcp://localhost:2375
  IMAGE_INFRA_BASE_NAME: "infra/images-docker"
  NODE_VERSION: "10.15-slim"
  NGINX_VERSION: "1.17"
  INFRA_GIT_DEPLOY_VERSION: "1.0"
  INFRA_GIT_TAG_RELEASE_VERSION: "1.0"
  INFRA_HELM_VERSION: "1.0"
  INFRA_CURL_VERSION: "1.0"
  FRONT_PORT: 80
  CLUSTER_NAME: "dev"
  APP_NAME: "standup"
  FEATURE_ENVIRONMENT_NAME: "feature"
  MASTER_ENVIRONMENT_NAME: "master"
  PREPROD_ENVIRONMENT_NAME: "prep"
  PROD_ENVIRONMENT_NAME: "prod"

#

.get_github_id_stage: &get_github_id_stage
  image:
    name: ${CI_REGISTRY}/${IMAGE_INFRA_BASE_NAME}/git-deploy:${INFRA_GIT_DEPLOY_VERSION}
  before_script:
    - envsubst < /scripts/get-deploy-id.sh > /scripts/get-github-deploy-id.sh
  script:
    - sh /scripts/get-github-deploy-id.sh
  artifacts:
    paths:
    - github_deploy_id

.node_stage_template: &node_stage
  image: node:${NODE_VERSION}
  before_script:
    - yarn --frozen-lockfile

.register_docker_image: &register_docker_image
  stage: "Register Docker Image"
  image: docker:18
  services:
    - name: docker:18-dind
  before_script:
    - docker login ${CI_REGISTRY} -u gitlab-ci-token -p ${CI_JOB_TOKEN}

.test_docker_image: &test_docker_image_stage
  stage: "Test Docker Image"
  image: ${CI_REGISTRY}/${IMAGE_INFRA_BASE_NAME}/curl:${INFRA_CURL_VERSION}
  services:
    - name: ${CI_REGISTRY_IMAGE}:${CI_COMMIT_SHA}
  script:
    - curl -v http://localhost:${FRONT_PORT}

.deploy_stage: &deploy_stage
  image:
    name: ${CI_REGISTRY}/${IMAGE_INFRA_BASE_NAME}/helm:${INFRA_HELM_VERSION}
  variables: &deploy_stage_variables
    PORT: ${FRONT_PORT}
  script:
    - helm init --client-only
    - helm repo add mas-incubateur https://socialgouv.github.io/helm-charts/
    - envsubst < .gitlab-ci/values.yaml > .gitlab-ci/values-${APP_NAME}.yaml
    - helm upgrade --install --wait --namespace standup-${NAMESPACE} --values=.gitlab-ci/values-${APP_NAME}.yaml ${HELM_RELEASE_NAME} mas-incubateur/webapp
  allow_failure: false

.send_url_to_github_stage: &send_url_to_github_stage
  stage: "Send Url to GitHub"
  image:
    name: ${CI_REGISTRY}/${IMAGE_INFRA_BASE_NAME}/git-deploy:${INFRA_GIT_DEPLOY_VERSION}
  script:
    - export DEPLOY_ID=$(cat github_deploy_id)
    - envsubst < /scripts/send-url.sh > /scripts/send-url-to-github.sh
    - sh /scripts/send-url-to-github.sh

# 

stages:
  - "Prepare"
  - "Build"
  - "Code Quality"
  - "Register Docker Image"
  - "Test Docker Image"
  - "Deploy Standup"
  - "Send Url to GitHub"
  - "Make a new release"
  - "Deploy Standup to prod"


###########################################
###               PREPARE               ###
###########################################


Get Github Id (feature):
  <<: *get_github_id_stage
  stage: "Prepare"
  environment:
    name: ${FEATURE_ENVIRONMENT_NAME}-${CLUSTER_NAME}
  except:
    - master
    - /^v.*/

Get Github Id (master):
  <<: *get_github_id_stage
  stage: "Prepare"
  environment:
    name: ${MASTER_ENVIRONMENT_NAME}-${CLUSTER_NAME}
  only:
    - master

Get Github Id (preprod):
  <<: *get_github_id_stage
  stage: "Prepare"
  environment:
    name: ${PREPROD_ENVIRONMENT_NAME}-${CLUSTER_NAME}
  only:
    - /^v.*/

Build Assets:
  <<: *node_stage
  stage: "Prepare"
  script:
    - yarn build
  cache:
    key: ${CI_COMMIT_REF_SLUG}
    paths:
      - node_modules/
  artifacts:
    expire_in: "1 day"
    paths:
      - build


###########################################
###             CODE QUALITY            ###
###########################################


Test:
  <<: *node_stage
  stage: "Code Quality"
  script:
    - yarn test

Lint:
  <<: *node_stage
  stage: "Code Quality"
  script:
    - yarn lint


###########################################
###       REGISTER DOCKER IMAGES        ###
###########################################


Register Docker Image Tagged with Commit SHA:
  <<: *register_docker_image
  script:
    - docker pull  ${CI_REGISTRY_IMAGE}:${CI_COMMIT_BEFORE_SHA} || true
    - >-
      docker build
      --build-arg NGINX_VERSION=${NGINX_VERSION}
      --build-arg EXPOSED_PORT=${FRONT_PORT}
      --cache-from "${CI_REGISTRY_IMAGE}:${CI_COMMIT_BEFORE_SHA}"
      -t "${CI_REGISTRY_IMAGE}:${CI_COMMIT_SHA}" .
    - docker push "${CI_REGISTRY_IMAGE}:${CI_COMMIT_SHA}"
  except:
    - /^v.*/

Register Docker image tagged with release version:
  <<: *register_docker_image
  script:
    - >-
      docker build
      --build-arg NGINX_VERSION=${NGINX_VERSION}
      --build-arg EXPOSED_PORT=${FRONT_PORT}
      -t  "${CI_REGISTRY_IMAGE}:${RELEASE_VERSION}" .
    - docker push "${CI_REGISTRY_IMAGE}:${RELEASE_VERSION}"
  only:
    - /^v.*/


###########################################
###          TEST DOCKER IMAGE          ###
###########################################


Test Docker image:
  <<: *test_docker_image_stage
  except:
    - /^v.*/

Test Docker image tagged with release version:
  <<: *test_docker_image_stage
  only:
    - /^v.*/

###########################################
###            DEPLOY TO K8S            ###
###########################################


Deploy Standup (feature):
  stage: "Deploy Standup"
  <<: *deploy_stage
  variables:
    <<: *deploy_stage_variables
    PORT: ${FRONT_PORT}
    NAMESPACE: ${FEATURE_ENVIRONMENT_NAME}
    LETSENCRYPT_ISSUER: letsencrypt-staging
    IMAGE_TAG: ${CI_COMMIT_SHA}
  environment:
    name: ${FEATURE_ENVIRONMENT_NAME}-${CLUSTER_NAME}
    url: https://${INGRESS_ENVIRONMENT_PREFIX}${APP_NAME}.${DOMAIN_NAME}
  before_script:
    - HASH_BRANCH_NAME=$(printf "${CI_COMMIT_REF_NAME}" | sha1sum | cut -c1-5)
    - export INGRESS_ENVIRONMENT_PREFIX=${HASH_BRANCH_NAME}. # "." at the end of line is needed to deploy into hors prod environment
    - export HELM_RELEASE_NAME=${APP_NAME}-${HASH_BRANCH_NAME}-${FEATURE_ENVIRONMENT_NAME}
    - export HASH_BRANCH_NAME=-${HASH_BRANCH_NAME}
  except:
    - master
    - /^v.*/

Deploy Standup (master):
  stage: "Deploy Standup"
  <<: *deploy_stage
  variables:
    <<: *deploy_stage_variables
    PORT: ${FRONT_PORT}
    NAMESPACE: ${MASTER_ENVIRONMENT_NAME}
    HASH_BRANCH_NAME: ''
    INGRESS_ENVIRONMENT_PREFIX: ${MASTER_ENVIRONMENT_NAME}. # "." at the end of line is needed to deploy into hors prod environment
    LETSENCRYPT_ISSUER: letsencrypt-prod
    IMAGE_TAG: ${CI_COMMIT_SHA}
  environment:
    name: ${MASTER_ENVIRONMENT_NAME}-${CLUSTER_NAME}
    url: https://${MASTER_ENVIRONMENT_NAME}.${APP_NAME}.${DOMAIN_NAME}
  before_script:
    - export HELM_RELEASE_NAME=${APP_NAME}-${MASTER_ENVIRONMENT_NAME}
  only:
    - master

Deploy Standup (preprod):
  stage: "Deploy Standup"
  <<: *deploy_stage
  variables:
    <<: *deploy_stage_variables
    NAMESPACE: ${PREPROD_ENVIRONMENT_NAME}
    HASH_BRANCH_NAME: ''
    INGRESS_ENVIRONMENT_PREFIX: ${PREPROD_ENVIRONMENT_NAME}. # "." at the end of line is needed to deploy into hors prod environment
    LETSENCRYPT_ISSUER: letsencrypt-prod
    IMAGE_TAG: ${RELEASE_VERSION}
  environment:
    name: ${PREPROD_ENVIRONMENT_NAME}-${CLUSTER_NAME}
    url: https://${PREPROD_ENVIRONMENT_NAME}.${APP_NAME}.${DOMAIN_NAME}
  before_script:
    - export HELM_RELEASE_NAME=${APP_NAME}-${PREPROD_ENVIRONMENT_NAME}
  only:
    - /^v.*/

###########################################
###         SEND URL TO GITHUB          ###
###########################################


Send deployment url to Github (feature):
  <<: *send_url_to_github_stage
  before_script:
    - HASH_BRANCH_NAME=$(printf "${CI_COMMIT_REF_NAME}" | sha1sum | cut -c1-5)
    - export INGRESS_ENVIRONMENT_PREFIX=${HASH_BRANCH_NAME}.
    - export URL=https://${INGRESS_ENVIRONMENT_PREFIX}standup.${DOMAIN_NAME}/
  environment:
    name: ${FEATURE_ENVIRONMENT_NAME}-${CLUSTER_NAME}
  except:
    - master
    - /^v.*/

Send deployment url to Github (master):
  <<: *send_url_to_github_stage
  variables:
    URL: https://${MASTER_ENVIRONMENT_NAME}.standup.${DOMAIN_NAME}/
  environment:
    name: ${MASTER_ENVIRONMENT_NAME}-${CLUSTER_NAME}
  only:
    - master

Send deployment url to Github (preprod):
  <<: *send_url_to_github_stage
  variables:
    URL: https://${PREPROD_ENVIRONMENT_NAME}.standup.${DOMAIN_NAME}/
  environment:
    name: ${PREPROD_ENVIRONMENT_NAME}-${CLUSTER_NAME}
  only:
    - /^v.*/


###########################################
###           RELEASE VERSION           ###
###########################################

Make a new release to deploy to preprod environment :
  stage: "Make a new release"
  image: ${CI_REGISTRY}/${IMAGE_INFRA_BASE_NAME}/curl:${INFRA_CURL_VERSION}
  script:
  - >-
    curl --verbose POST
    https://${GITHUB_TOKEN}@api.github.com/repos/SocialGouv/standup/git/refs
    --header 'Content-Type:application/json'
    --data '{"ref": "refs/tags/'${RELEASE_VERSION}'", "sha": "'${CI_COMMIT_SHA}'"}'
  when: manual
  only:
    - master


###########################################
###            DEPLOY TO PROD           ###
###########################################

Deploy Standup (prod) :
  stage: "Deploy Standup to prod"
  <<: *deploy_stage
  variables:
    <<: *deploy_stage_variables
    NAMESPACE: ${PROD_ENVIRONMENT_NAME}
    INGRESS_ENVIRONMENT_PREFIX: ''
    LETSENCRYPT_ISSUER: letsencrypt-prod
    IMAGE_TAG: ${RELEASE_VERSION}
  environment:
    name: ${PROD_ENVIRONMENT_NAME}
    url: https://${APP_NAME}.${DOMAIN_NAME}
  before_script:
    - export HELM_RELEASE_NAME=${APP_NAME}-${PROD_ENVIRONMENT_NAME}
  when: manual
  only:
    - /^v.*/
